/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frames;


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import static java.util.Arrays.asList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.PDFRenderer;
import rapidmail.ConexionYValidacion;
import rapidmail.FuncionesLogin;


/**
 *
 * @author gutyc
 */
public class appCorreo extends javax.swing.JFrame {

    private static JLabel imageLabel;
    
    int archivosPermitidos;
    int megasPermitidos;
    
    JLabel[] basArray;
    
    private static ArrayList<File> archivos = new ArrayList<>();
    static ArrayList<String> destinatarios;

    //18 de febrero 2025: Cambios en las funciones de clase ConexionYValidacion.
    private ConexionYValidacion cyv;
    
    
    
    
    
    
    
    
    /**
     * Creates new form appCorreo
     */
    public appCorreo() {
        initComponents();
        
        this.setLocationRelativeTo(null);
        
        imageLabel = new JLabel();

        
        bas1.setVisible(false);
        bas2.setVisible(false);
        bas3.setVisible(false);
        
        
        basArray = new JLabel[3];
        basArray[0] = bas1;
        basArray[1] = bas2;
        basArray[2] = bas3;
        
        
        archivosPermitidos = 3;
        megasPermitidos = 20;
        
        listaArchivos.setAutoscrolls(false);
        
        textMensaje.setLineWrap(true); 
        textMensaje.setWrapStyleWord(true); 
        
        destinatarios = new ArrayList<>();
        
        //18 de febrero 2025:
        cyv = new ConexionYValidacion(LOGIN.getRemitente(), LOGIN.getClave());
        
        // 23 de febrero 2025: 1:27 am. Se encarga de cerrar la conexión cuando se cierra la aplicación.
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                cyv.cerrarConexion(); 
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        textDestinatarios = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textAsunto = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textMensaje = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaArchivos = new javax.swing.JList<>();
        botonEnviarArchivos = new javax.swing.JButton();
        bas1 = new javax.swing.JLabel();
        bas2 = new javax.swing.JLabel();
        bas3 = new javax.swing.JLabel();
        panelVisualizacion = new javax.swing.JPanel();
        botonEnviar = new javax.swing.JButton();
        basDestinatario = new javax.swing.JLabel();
        basAsunto = new javax.swing.JLabel();
        basMensaje = new javax.swing.JLabel();
        botonBorrarTodo = new javax.swing.JButton();
        botonMasDestinatarios = new javax.swing.JLabel();
        actualizarCorreos = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tamañoDelArchivo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 255));

        jLabel2.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        jLabel2.setText("Destinatario:");

        textDestinatarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textDestinatariosActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        jLabel3.setText("Asunto:");

        textMensaje.setColumns(20);
        textMensaje.setRows(5);
        jScrollPane1.setViewportView(textMensaje);

        listaArchivos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaArchivosValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listaArchivos);

        botonEnviarArchivos.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        botonEnviarArchivos.setText("Enviar Archivos");
        botonEnviarArchivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnviarArchivosActionPerformed(evt);
            }
        });

        bas1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/compartimentoArchivos.png"))); // NOI18N
        bas1.setText("jLabel1");
        bas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bas1MouseClicked(evt);
            }
        });

        bas2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/compartimentoArchivos.png"))); // NOI18N
        bas2.setText("jLabel1");
        bas2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bas2MouseClicked(evt);
            }
        });

        bas3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/compartimentoArchivos.png"))); // NOI18N
        bas3.setText("jLabel1");
        bas3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bas3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bas1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bas2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bas3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(botonEnviarArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(botonEnviarArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bas1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bas2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bas3))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelVisualizacion.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panelVisualizacionLayout = new javax.swing.GroupLayout(panelVisualizacion);
        panelVisualizacion.setLayout(panelVisualizacionLayout);
        panelVisualizacionLayout.setHorizontalGroup(
            panelVisualizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 239, Short.MAX_VALUE)
        );
        panelVisualizacionLayout.setVerticalGroup(
            panelVisualizacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 296, Short.MAX_VALUE)
        );

        botonEnviar.setFont(new java.awt.Font("Gill Sans MT", 0, 18)); // NOI18N
        botonEnviar.setText("ENVIAR");
        botonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnviarActionPerformed(evt);
            }
        });

        basDestinatario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/compartimento.png"))); // NOI18N
        basDestinatario.setText("jLabel1");
        basDestinatario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                basDestinatarioMouseClicked(evt);
            }
        });

        basAsunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/compartimento.png"))); // NOI18N
        basAsunto.setText("jLabel1");
        basAsunto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                basAsuntoMouseClicked(evt);
            }
        });

        basMensaje.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/compartimento.png"))); // NOI18N
        basMensaje.setText("jLabel1");
        basMensaje.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                basMensajeMouseClicked(evt);
            }
        });

        botonBorrarTodo.setBackground(new java.awt.Color(255, 102, 102));
        botonBorrarTodo.setFont(new java.awt.Font("Gill Sans MT", 1, 14)); // NOI18N
        botonBorrarTodo.setForeground(new java.awt.Color(255, 255, 255));
        botonBorrarTodo.setText("BORRAR TODO");
        botonBorrarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBorrarTodoActionPerformed(evt);
            }
        });

        botonMasDestinatarios.setBackground(new java.awt.Color(255, 204, 204));
        botonMasDestinatarios.setFont(new java.awt.Font("Gill Sans MT", 0, 24)); // NOI18N
        botonMasDestinatarios.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        botonMasDestinatarios.setText("+");
        botonMasDestinatarios.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        botonMasDestinatarios.setOpaque(true);
        botonMasDestinatarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                botonMasDestinatariosMouseClicked(evt);
            }
        });

        actualizarCorreos.setFont(new java.awt.Font("Gill Sans MT", 0, 14)); // NOI18N
        actualizarCorreos.setText("Actualizar destinatarios");
        actualizarCorreos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarCorreosActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Gill Sans MT", 0, 12)); // NOI18N
        jLabel6.setText("Tamaño del archivo:");

        tamañoDelArchivo.setBackground(new java.awt.Color(204, 204, 204));
        tamañoDelArchivo.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(botonMasDestinatarios, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(actualizarCorreos))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textDestinatarios, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(textAsunto, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(basAsunto, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(basDestinatario, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(381, 381, 381))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(panelVisualizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(basMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(29, 29, 29)
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(botonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(botonBorrarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8)))))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tamañoDelArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelVisualizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(tamañoDelArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 53, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(botonMasDestinatarios, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(actualizarCorreos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textDestinatarios, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(basDestinatario))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textAsunto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(basAsunto))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(basMensaje)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(botonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(botonBorrarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonEnviarArchivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEnviarArchivosActionPerformed
        Frame frame = new Frame();
        FileDialog fileDialog = new FileDialog(frame, "Abrir Archivos", FileDialog.LOAD);
        fileDialog.setMultipleMode(true);  // Permitir selección múltiple
        fileDialog.setVisible(true);

        File[] files = fileDialog.getFiles(); // Obtener archivos seleccionados
        

        boolean permitido = false;
        
        if(validarExtensiones(files)){
            if(validarPeso(files)){
                if(validarNumeroDeArchivos(files)){
                    permitido = true;
                }
            }
        }
        
        if(permitido){
            archivos.addAll(Arrays.asList(files)); 
        }
        actualizarListView();
    }//GEN-LAST:event_botonEnviarArchivosActionPerformed

    
    private boolean validarExtensiones(File[] files) {
        
        //Array de extensiones generado por chatGPT
        String[] extensionesPermitidas = {
        "png", "jpg", "jpeg", "gif", "bmp", "tiff", "svg", "pptx", 
        "zip", "rar", "tar", "7z", "gz", 
        "mp4", "mkv", "avi", "mov", "wmv", "flv", 
        "pdf", "doc", "docx", "txt", "rtf", "odt", "xls", "xlsx"
    };
    
        for(File file : files) {
            String nombre = file.getName();
            String extension = nombre.substring(nombre.lastIndexOf('.') + 1);

            boolean esValida = false;
            for (String ext : extensionesPermitidas) {
                if (ext.equalsIgnoreCase(extension)) {
                    esValida = true;
                    break;
                }
            }

            if (!esValida) {
                JOptionPane.showMessageDialog(null, "La siguiente extensión de archivo no es válida: " + extension);
                return false; 
            }
        }
        return true;
    }
    
    private boolean validarPeso(File[] files) {
        for(File file : files) {
            if(file.length() > megasPermitidos * 1024 * 1024){ //20mb
                JOptionPane.showMessageDialog(null, "Lo siento, no se permiten archivos mayores a " + megasPermitidos + "Mb");
                return false;
            }
        }
        return true;
    }
    
    private boolean validarNumeroDeArchivos(File[] files) {
        if (files.length + listaArchivos.getModel().getSize() > archivosPermitidos) {
                JOptionPane.showMessageDialog(null, "Lo siento, no es posible enviar más de 3 archivos por correo");
                return false;
        }
        return true;
    }
    
    
    private void actualizarListView() {
            //Estructura de array de Strings sugerida por chatGPT
            String[] nombresArchivos = archivos.stream().map(File::getName).toArray(String[]::new);
            listaArchivos.setListData(nombresArchivos);
            
            for(int i = 0; i < archivosPermitidos; i++) {
                if(i < archivos.size()) {
                    basArray[i].setVisible(true);
                } else {
                    basArray[i].setVisible(false);
                }
            }
      
    }

    
    
    
    private void botonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEnviarActionPerformed
        
        destinatarios.addAll(asList(textDestinatarios.getText().split(", ")));
        
        //Se validan cada uno de los destinatarios
        boolean flag = true;
        for(String des: destinatarios) {
            if(!FuncionesLogin.validarCorreo(des)){
                flag = false;
                break;
            }
        }
        
        
        //18 de febrero 2025. 2:15 pm : Si todos están validados, se manda el mensaje a cada uno.
        if(flag){
            if(cyv.construirMensaje(LOGIN.getRemitente(), destinatarios, textAsunto.getText(), textMensaje.getText())){
                
                //23 de febrero 2025: 12:35 am Se llama al executor para enviar el mensaje en segundo plano, sin bloquear la aplicación.
                ExecutorService executor = Executors.newSingleThreadExecutor();
                
                executor.submit(() -> {
                    cyv.enviarMensaje();
                    executor.shutdown();
                });

                JOptionPane.showMessageDialog(null, "Correo enviado con éxito!");
                borrarTodo();
            }
        }
    }//GEN-LAST:event_botonEnviarActionPerformed

    private void basDestinatarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_basDestinatarioMouseClicked
        textDestinatarios.setText("");
    }//GEN-LAST:event_basDestinatarioMouseClicked

    private void basAsuntoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_basAsuntoMouseClicked
        textAsunto.setText("");
    }//GEN-LAST:event_basAsuntoMouseClicked

    private void basMensajeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_basMensajeMouseClicked
        textMensaje.setText("");
    }//GEN-LAST:event_basMensajeMouseClicked

    private void bas1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bas1MouseClicked
        archivos.remove(0);
        actualizarListView();
        limpiarPanelVisualizacion();
        tamañoDelArchivo.setText("");
    }//GEN-LAST:event_bas1MouseClicked

    private void bas2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bas2MouseClicked
       archivos.remove(1);
        actualizarListView();
       limpiarPanelVisualizacion();
       tamañoDelArchivo.setText("");
    }//GEN-LAST:event_bas2MouseClicked

    private void bas3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bas3MouseClicked
       archivos.remove(2);
        actualizarListView();
        limpiarPanelVisualizacion();
        tamañoDelArchivo.setText("");
    }//GEN-LAST:event_bas3MouseClicked

    private void botonBorrarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarTodoActionPerformed

        borrarTodo();
    }//GEN-LAST:event_botonBorrarTodoActionPerformed

    private void botonMasDestinatariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_botonMasDestinatariosMouseClicked
        destinatarios.clear();
        destinatarios.addAll(asList(textDestinatarios.getText().split(", ")));
        CorreosAEnviar corr = new CorreosAEnviar();
        
        corr.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        corr.setVisible(true);
    }//GEN-LAST:event_botonMasDestinatariosMouseClicked

    private void actualizarCorreosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarCorreosActionPerformed
        String destin = "";
            for(int i = 0; i < destinatarios.size(); i++) {
                if(i < destinatarios.size()-1) {
                    destin += destinatarios.get(i) + ", ";
                } else {
                    destin+= destinatarios.get(i);
                }
            }
            
            textDestinatarios.setText(destin);
    }//GEN-LAST:event_actualizarCorreosActionPerformed

    private void listaArchivosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaArchivosValueChanged
        
        int numeroArchivo = listaArchivos.getSelectedIndex();
        if (numeroArchivo == -1) return;
        
        DecimalFormat formato = new DecimalFormat("#.###");
        tamañoDelArchivo.setText(formato.format(archivos.get(numeroArchivo).length() / 1024.0) + " Kb");
        
        String nombreArchivo = archivos.get(numeroArchivo).getName();
        
        if(!"pdf".equals(nombreArchivo.substring(nombreArchivo.lastIndexOf('.') + 1))){ 
            limpiarPanelVisualizacion();
            panelVisualizacion.setLayout(new BorderLayout());
            
            //uso se SwingConstants y BorderLayout sugerido por chatGPT
            panelVisualizacion.add(new JLabel("Sin Visualizacion Previa", SwingConstants.CENTER), BorderLayout.CENTER);
            return;
        }
        
        
        String selectedFile = archivos.get(numeroArchivo).getAbsolutePath();
        
        if (selectedFile != null) {
            renderPDF(selectedFile);
        }
    }//GEN-LAST:event_listaArchivosValueChanged

    private void textDestinatariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textDestinatariosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textDestinatariosActionPerformed
    
    public void limpiarPanelVisualizacion() {
            panelVisualizacion.removeAll();

            panelVisualizacion.setPreferredSize(new Dimension(panelVisualizacion.getWidth(), panelVisualizacion.getHeight()));

            panelVisualizacion.revalidate();
            panelVisualizacion.repaint();
    }
    
    
      public void renderPDF(String filePath) {
        try {  
            File file = new File(filePath);
            if (!file.exists() || file.length() == 0) {
                JOptionPane.showMessageDialog(null, "El archivo PDF no existe o está vacío.");
                return;
            }

           //uso de PDDocument, PDFRenderer y BufferedImage sugerido de chatGPT    
            PDDocument document = PDDocument.load(file);
            PDFRenderer pdfRenderer = new PDFRenderer(document);
            BufferedImage image = pdfRenderer.renderImageWithDPI(0, 300);
            document.close();
            
            
            int panelWidth = panelVisualizacion.getWidth();
            int panelHeight = panelVisualizacion.getHeight();
            
            BufferedImage scaledImage = smoothScale(image, panelWidth, panelHeight);

             
            imageLabel.setIcon(new ImageIcon(scaledImage));
            

            panelVisualizacion.removeAll(); 
            panelVisualizacion.setLayout(new BorderLayout());
            panelVisualizacion.add(imageLabel, BorderLayout.CENTER);
            panelVisualizacion.revalidate();
            panelVisualizacion.repaint();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(appCorreo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(appCorreo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
   
      
      //Método smoothScale implementado por chatGPT, con ciertos ajustes para introducir un método más con interpolación bicúbica
    private BufferedImage smoothScale(BufferedImage img, int anchoDeseado, int largoDeseado) {
        int currentWidth = img.getWidth();
        int currentHeight = img.getHeight();

        BufferedImage imgMasChica = img;

        // Reducir la imagen en pasos del 50% hasta llegar al tamaño deseado
        while (currentWidth > anchoDeseado * 2 || currentHeight > largoDeseado * 2) {
            currentWidth /= 2;
            currentHeight /= 2;
            imgMasChica = resizeImage(imgMasChica, currentWidth, currentHeight);
        }

        // Última reducción precisa al tamaño final
        imgMasChica = resizeImage(imgMasChica, anchoDeseado, largoDeseado);
        return imgMasChica;
    }

    
    
    // Método de escalamiento bicúbico, idea obtenida de chatGPT.
    private BufferedImage resizeImage(BufferedImage original, int width, int height) {
        BufferedImage imagenFinal = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graph = imagenFinal.createGraphics();

        // Activar interpolación de alta calidad
        graph.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        graph.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        graph.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        // Dibujar la imagen escalada
        graph.drawImage(original, 0, 0, width, height, null);
        graph.dispose();

        return imagenFinal;
    }
      
      
    
    public static ArrayList<File> getArchivos() {
        return archivos;
    }
    
        
    public void borrarTodo() {
        textAsunto.setText("");
        textMensaje.setText("");
        archivos.clear();
        actualizarListView();
        limpiarPanelVisualizacion();
        tamañoDelArchivo.setText("");
    }
    
    
    public static ArrayList<String> getDestinatarios() {
        return destinatarios;
    }
    
    public static void setDestinatarios(ArrayList<String> des) {
        destinatarios = new ArrayList<>(des);
    }
    
    public void setlabdes(String des) {
        textDestinatarios.setText(des);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(appCorreo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(appCorreo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(appCorreo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(appCorreo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new appCorreo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarCorreos;
    private javax.swing.JLabel bas1;
    private javax.swing.JLabel bas2;
    private javax.swing.JLabel bas3;
    private javax.swing.JLabel basAsunto;
    private javax.swing.JLabel basDestinatario;
    private javax.swing.JLabel basMensaje;
    private javax.swing.JButton botonBorrarTodo;
    private javax.swing.JButton botonEnviar;
    private javax.swing.JButton botonEnviarArchivos;
    private javax.swing.JLabel botonMasDestinatarios;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listaArchivos;
    private javax.swing.JPanel panelVisualizacion;
    private javax.swing.JLabel tamañoDelArchivo;
    private javax.swing.JTextField textAsunto;
    private javax.swing.JTextField textDestinatarios;
    private javax.swing.JTextArea textMensaje;
    // End of variables declaration//GEN-END:variables
}
